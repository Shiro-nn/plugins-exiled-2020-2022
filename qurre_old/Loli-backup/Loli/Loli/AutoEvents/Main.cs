using MEC;
using Qurre.API;
using System.Linq;
namespace Loli.AutoEvents
{
    public class Main
    {
        internal readonly Plugin plugin;
        public Main(Plugin plugin) => this.plugin = plugin;
        public StormBase StormBase;
        public GunGame GunGame;
        public TeamDeathmatch TeamDeathmatch;
        public void Register()
        {
            Qurre.Events.Server.SendingRA += RA;
        }
        public void UnRegister()
        {
            Qurre.Events.Server.SendingRA -= RA;
            UnRegisterStormBase();
            UnRegisterGunGame();
            UnRegisterTeamDeathmatch();
        }
        #region StormBase
        public void RegisterStormBase()
        {
            StormBase = new StormBase(this);
            Qurre.Events.Player.InteractLift += StormBase.Elevator;
            Qurre.Events.Player.Spawn += StormBase.Spawned;
            Qurre.Events.Player.Leave += StormBase.Left;
            Qurre.Events.Player.Join += StormBase.Join;
            Qurre.Events.Player.PickupItem += StormBase.Pickup;
            Qurre.Events.Player.DropItem += StormBase.Drop;
            Qurre.Events.Player.Dead += StormBase.Dead;
            Qurre.Events.Round.Check += StormBase.Ending;
        }
        public void UnRegisterStormBase()
        {
            Qurre.Events.Player.InteractLift -= StormBase.Elevator;
            Qurre.Events.Player.Spawn -= StormBase.Spawned;
            Qurre.Events.Player.Leave -= StormBase.Left;
            Qurre.Events.Player.Join -= StormBase.Join;
            Qurre.Events.Player.PickupItem -= StormBase.Pickup;
            Qurre.Events.Player.DropItem -= StormBase.Drop;
            Qurre.Events.Player.Dead -= StormBase.Dead;
            Qurre.Events.Round.Check -= StormBase.Ending;
            StormBase = null;
        }
        #endregion
        #region GunGame
        public void RegisterGunGame()
        {
            GunGame = new GunGame(this);
            Qurre.Events.Round.Waiting += GunGame.Waiting;
            Qurre.Events.Player.Join += GunGame.Join;
            Qurre.Events.Player.Leave += GunGame.Leave;
            Qurre.Events.Player.Dead += GunGame.Dead;
            Qurre.Events.Player.RoleChange += GunGame.Spawn;
            Qurre.Events.Player.Spawn += GunGame.Spawn;
            Qurre.Events.Player.ThrowItem += GunGame.AddGrenade;
            Qurre.Events.Player.PickupItem += GunGame.Pickup;
            Qurre.Events.Player.DroppingItem += GunGame.Drop;
            Qurre.Events.Player.RagdollSpawn += GunGame.Ragdolls;
            Qurre.Events.Map.PlaceBulletHole += GunGame.Bullets;
            Qurre.Events.Player.InteractDoor += GunGame.Door;
            Qurre.Events.Map.LczDecon += GunGame.LczFix;
            Qurre.Events.Scp914.Activating += GunGame.UpgradeFix;
        }
        public void UnRegisterGunGame()
        {
            Qurre.Events.Round.Waiting -= GunGame.Waiting;
            Qurre.Events.Player.Join -= GunGame.Join;
            Qurre.Events.Player.Leave -= GunGame.Leave;
            Qurre.Events.Player.Dead -= GunGame.Dead;
            Qurre.Events.Player.RoleChange -= GunGame.Spawn;
            Qurre.Events.Player.Spawn -= GunGame.Spawn;
            Qurre.Events.Player.ThrowItem -= GunGame.AddGrenade;
            Qurre.Events.Player.PickupItem -= GunGame.Pickup;
            Qurre.Events.Player.DroppingItem -= GunGame.Drop;
            Qurre.Events.Player.RagdollSpawn -= GunGame.Ragdolls;
            Qurre.Events.Map.PlaceBulletHole -= GunGame.Bullets;
            Qurre.Events.Player.InteractDoor -= GunGame.Door;
            Qurre.Events.Map.LczDecon -= GunGame.LczFix;
            Qurre.Events.Scp914.Activating -= GunGame.UpgradeFix;
            Timing.KillCoroutines("GunGameCor");
            GunGame.Kills.Clear();
            GunGame = null;
            GunGame.Enabled = false;
        }
        #endregion
        #region TeamDeathmatch
        public void RegisterTeamDeathmatch()
        {
            TeamDeathmatch = new TeamDeathmatch(this);
            Qurre.Events.Round.Waiting += TeamDeathmatch.Waiting;
            Qurre.Events.Round.Start += TeamDeathmatch.RoundStart;
            Qurre.Events.Player.RagdollSpawn += TeamDeathmatch.Ragdolls;
            Qurre.Events.Player.DroppingItem += TeamDeathmatch.Drop;
            Qurre.Events.Player.Spawn += TeamDeathmatch.Spawn;
            Qurre.Events.Player.Leave += TeamDeathmatch.Leave;
            Qurre.Events.Player.Join += TeamDeathmatch.Join;
            Qurre.Events.Player.Dead += TeamDeathmatch.Dead;
        }
        public void UnRegisterTeamDeathmatch()
        {
            Qurre.Events.Round.Waiting -= TeamDeathmatch.Waiting;
            Qurre.Events.Round.Start -= TeamDeathmatch.RoundStart;
            Qurre.Events.Player.RagdollSpawn -= TeamDeathmatch.Ragdolls;
            Qurre.Events.Player.DroppingItem -= TeamDeathmatch.Drop;
            Qurre.Events.Player.Spawn -= TeamDeathmatch.Spawn;
            Qurre.Events.Player.Leave -= TeamDeathmatch.Leave;
            Qurre.Events.Player.Join -= TeamDeathmatch.Join;
            Qurre.Events.Player.Dead -= TeamDeathmatch.Dead;
            Timing.KillCoroutines("TeamDeathmatchHints");
            Timing.KillCoroutines("TeamDeathmatchWaitRestart");
            TeamDeathmatch = null;
            TeamDeathmatch.Enabled = false;
        }
        #endregion
        private void RA(Qurre.API.Events.SendingRAEvent ev)
        {
            if (ev.Name == "auto_event" || ev.Name == "aa" || ev.Name == "ae")
            {
                ev.Prefix = "AutoEvents";
                ev.Allowed = false;
                if (Event_Access(ev.CommandSender.SenderId))
                {
                    if (ev.Args.Count() > 0)
                    {
                        string event_name = ev.Args[0].ToLower();
                        if (event_name == "storm" || event_name == "storm_base" || event_name == "sb")
                        {
                            ev.ReplyMessage = "–£—Å—Ç–∞—Ä–µ–ª";
                            return;/*
                            RegisterStormBase();
                            Map.Broadcast("<size=30%><color=#0089c7>–°–µ–π—á–∞—Å –∑–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç <color=red>–®—Ç—É—Ä–º –±–∞–∑—ã –•–∞–æ—Å–∞</color>.</color>\n" +
                                "<color=#494f61>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞ <color=lime>[<color=aqua>—ë</color>]</color>.</color></size>", 15);
                            foreach (Player pl in Player.List) pl.SendConsoleMessage("\n–®—Ç—É—Ä–º –±–∞–∑—ã –•–∞–æ—Å–∞\n–•–∞–æ—Å –∑–∞–±—Ä–∞–ª –∏–∑ –∫–æ–º–ø–ª–µ–∫—Å–∞ MicroHID'—ã, —Å–æ–≤–µ—Ç –æ5 –¥–∞–ª –ø—Ä–∏–∫–∞–∑: *–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ MicroHID'—ã*.\n" +
                                "–ó–∞–¥–∞—á–∞ –º–æ–≥ - –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ MicroHID'—ã —Å –±–∞–∑—ã —Ö–∞–æ—Å–∞.\n–ó–∞–¥–∞—á–∞ —Ö–∞–æ—Å–∞ - –∑–∞—â–∏—Ç–∏—Ç—å MicroHID'—ã.\n" +
                                "MicroHID'—ã –º–æ–≥—É—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å –∏ –º–æ–≥, –∏ —Ö–∞–æ—Å. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–æ–¥–æ–±—Ä–∞–ª MicroHID, —Ç–æ –æ–± —ç—Ç–æ–º —É–∑–Ω–∞—é—Ç –¥—Ä—É–≥–∏–µ, –ø–æ—ç—Ç–æ–º—É –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.", "red");
                            ev.ReplyMessage = "–£—Å–ø–µ—à–Ω–æ";
                            StormBase.Enable();
                            Logs.Api.SendRa($"üéöÔ∏è –ó–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç - –®—Ç—É—Ä–º –±–∞–∑—ã –•–∞–æ—Å–∞");
                            SCPDiscordLogs.Api.SendMessage($"üéöÔ∏è –ó–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç - –®—Ç—É—Ä–º –±–∞–∑—ã –•–∞–æ—Å–∞");
                            SCPDiscordLogs.Api.SendMessage($"üéöÔ∏è –ó–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç - –®—Ç—É—Ä–º –±–∞–∑—ã –•–∞–æ—Å–∞", SCPDiscordLogs.Api.Status.RemoteAdmin);*/
                        }
                        else if (event_name == "gun" || event_name == "gun_game" || event_name == "gg")
                        {
                            RegisterGunGame();
                            Map.Broadcast("<size=30%><color=#0089c7>–°–µ–π—á–∞—Å –∑–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç <color=red>–ò–≥—Ä–∞ —Å –æ—Ä—É–∂–∏–µ–º</color>.</color>\n<color=#494f61>–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —É–±–∏—Ç—å –¥—Ä—É–≥–∏—Ö.</color></size>", 15);
                            ev.ReplyMessage = "–£—Å–ø–µ—à–Ω–æ";
                            GunGame.Enable();
                            Logs.Api.SendRa($"üéöÔ∏è –ó–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç - –ò–≥—Ä–∞ —Å –æ—Ä—É–∂–∏–µ–º");
                            SCPDiscordLogs.Api.SendMessage($"üéöÔ∏è –ó–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç - –ò–≥—Ä–∞ —Å –æ—Ä—É–∂–∏–µ–º");
                            SCPDiscordLogs.Api.SendMessage($"üéöÔ∏è –ó–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç - –ò–≥—Ä–∞ —Å –æ—Ä—É–∂–∏–µ–º", SCPDiscordLogs.Api.Status.RemoteAdmin);
                        }
                        else if (event_name == "teamdeathmatch" || event_name == "tdm" || event_name == "td")
                        {
                            RegisterTeamDeathmatch();
                            ev.ReplyMessage = "–£—Å–ø–µ—à–Ω–æ";
                            TeamDeathmatch.Enable();
                            Logs.Api.SendRa($"üéöÔ∏è –ó–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç - –ö–æ–º–∞–Ω–¥–Ω–∞—è –±–∏—Ç–≤–∞ –Ω–∞—Å–º–µ—Ä—Ç—å");
                            SCPDiscordLogs.Api.SendMessage($"üéöÔ∏è –ó–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç - –ö–æ–º–∞–Ω–¥–Ω–∞—è –±–∏—Ç–≤–∞ –Ω–∞—Å–º–µ—Ä—Ç—å");
                            SCPDiscordLogs.Api.SendMessage($"üéöÔ∏è –ó–∞–ø—É—â–µ–Ω –∏–≤–µ–Ω—Ç - –ö–æ–º–∞–Ω–¥–Ω–∞—è –±–∏—Ç–≤–∞ –Ω–∞—Å–º–µ—Ä—Ç—å", SCPDiscordLogs.Api.Status.RemoteAdmin);
                        }
                    }
                    else
                    {
                        ev.ReplyMessage = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ-–∏–≤–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:\n" +
                            "–®—Ç—É—Ä–º –±–∞–∑—ã —Ö–∞–æ—Å–∞ - auto_event storm_base // ae sb\n" +
                            "–ò–≥—Ä–∞ —Å –æ—Ä—É–∂–∏–µ–º - auto_event gun_game // ae gg\n" +
                            "–ö–æ–º–∞–Ω–¥–Ω–∞—è –±–∏—Ç–≤–∞ –Ω–∞—Å–º–µ—Ä—Ç—å - auto_event TeamDeathmatch // ae td";
                    }
                }
                else
                {
                    ev.ReplyMessage = "–ù–µ—Ç –ø—Ä–∞–≤, —É–≤—ã.";
                }
            }
        }
        private bool Event_Access(string iD)
        {
            bool _ = false;
            if (iD == "-@steam" || iD == "SERVER CONSOLE") _ = true;
            try
            {
                if (DataBase.Manager.Static.Data.Users.TryGetValue(iD, out var main) &&
                    (main.mainhelper || main.admin || main.mainadmin || main.owner || main.id == 1 ||
                    (Plugin.YouTubersServer && DataBase.Modules.CustomDonates.ThisYt(main)))) _ = true;
            }
            catch { }
            return _;
        }
    }
}